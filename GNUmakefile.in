# Makefile for rama-angles
#
#        Copyright Maarten L. Hekkelman, 2014-2020
# Distributed under the Boost Software License, Version 1.0.
#    (See accompanying file LICENSE_1_0.txt or copy at
#          http://www.boost.org/LICENSE_1_0.txt)
#
# Use the make.config file in the uplevel directory to
# change the settings for this build

firstTarget: all

CXX					= @CXX@
CXXFLAGS			= @CXXFLAGS@ @CPPFLAGS@ @BOOST_CPPFLAGS@ @LIBZEEP_CPPFLAGS@ @PTHREAD_CFLAGS@ @LIBCLIPPER_CPPFLAGS@ @GSL_CFLAGS@
LDFLAGS				= @LDFLAGS@ @BOOST_LDFLAGS@ @LIBZEEP_LDFLAGS@ @PTHREAD_CFLAGS@ @LIBCLIPPER_LDFLAGS@
LIBS				= @LIBS@ @GSL_LIBS@ \
					  @BOOST_IOSTREAMS_LIB@ \
					  @BOOST_THREAD_LIB@ \
					  @BOOST_REGEX_LIB@ \
					  @BOOST_PROGRAM_OPTIONS_LIB@ \
					  -lboost_timer -lboost_chrono

prefix				= @prefix@
exec_prefix			= @exec_prefix@
libdir				= @libdir@
includedir			= @includedir@

GNUmakefile: config.status GNUmakefile.in
	$(SHELL) ./config.status

config.status: configure
	$(SHELL) ./config.status --recheck

configure: configure.ac
	autoconf

# main build variables
CXXFLAGS            += -Wall -Wno-multichar

PACKAGES			+= 

ifneq ($(PACKAGES),)
CXXFLAGS			+= $(shell PKG_CONFIG_PATH=$(PKG_CONFIG_PATH) pkg-config --cflags $(PACKAGES))
LDFLAGS				+= $(shell PKG_CONFIG_PATH=$(PKG_CONFIG_PATH) pkg-config --libs $(PACKAGES) )
endif

# Use the DEBUG flag to build debug versions of the code
DEBUG               = @DEBUG@

ifeq "$(DEBUG)" "1"
DEFINES				+= DEBUG
CXXFLAGS            += -g -O0
LDFLAGS				+= -g
else
CXXFLAGS			+= -O2
DEFINES				+= NDEBUG
endif

MRC					= @MRC@
CIFPP_RSRC			= @CIFPP_RSRC@

ifneq "$(MRC)" ""
USE_RSRC	?= 1
DEFINES		+= USE_RSRC
endif

# targets

VPATH += src:test

CXXFLAGS			+= $(DEFINES:%=-D%)

OBJDIR = obj
ifeq "$(DEBUG)" "1"
	OBJDIR	:= $(OBJDIR).dbg
endif

$(OBJDIR):
	mkdir -p $(OBJDIR)

ifeq "$(MRC)" ""

$(OBJDIR)/%.o: %.cpp | $(OBJDIR)
	@ echo ">>" $<
	@ $(CXX) -MD -c -o $@ $< $(CFLAGS) $(CXXFLAGS)

else

$(OBJDIR)/%.o: %.cpp | $(OBJDIR)
	@ echo ">>" $<
	@ $(CXX) -MD -c -o $@ $< $(CFLAGS) $(CXXFLAGS)

COMMON_OBJECTS = pr-main.o
COMMON_RSRC = @CIFPP_RSRC@/dictionaries @CIFPP_RSRC@/isomers.txt rsrc/version.txt @CIFPP_RSRC@/lib-version.txt

endif

# The program rules

# disabled for now: centrifuge map-maker
PROGRAMS = \
	pdb2cif cif2pdb mtz-maker cif-diff cif-grep cif-merge extractor \
	prepper tls-interpreter stats isomers chiron re-ref cif-validate \
	pepflip compref tortoize flipper mmCQL


centrifuge_OBJECTS = HBondTraits.o svm++.o
map-maker_OBJECTS = pr-server.o
rama-angles_OBJECTS = pr-server.o ramachandran.o
re-ref_OBJECTS = minimizer.o restraints.o
pepflip_OBJECTS = minimizer.o restraints.o skiplist.o ramachandran.o

tortoize_RSRC = rsrc/rama-data.bin rsrc/torsion-data.bin
map-maker_RSRC = $(DOCROOT_FILES)
rama-angles_RSRC = $(DOCROOT_FILES)

define PROGRAM_template =

$(1)_OBJECTS += $(1).o $(COMMON_OBJECTS)

ifneq "$(MRC)" ""
$(1)_OBJECTS += $(1).o $(1)_rsrc.o

$$(OBJDIR)/$(1)_rsrc.o: @CIFPP_RSRC@/dictionaries $$($(1)_RSRC) $$(COMMON_RSRC)
	$(MRC) -o $$@ $$^
endif

$(1): $$($(1)_OBJECTS:%=$(OBJDIR)/%)

endef

$(foreach program,$(PROGRAMS),$(eval $(call PROGRAM_template,$(program))))

$(PROGRAMS):
	@ echo '->' $@
	@ $(CXX) -o $@ $^ $(CXXFLAGS) $(LDFLAGS) $(LIBS)

OBJECTS = $(sort $(foreach program,$(PROGRAMS),$($(program)_OBJECTS)))

$(OBJDIR)/%.d: $(OBJDIR)/%.o

-include $(OBJECTS:%.o=$(OBJDIR)/%.d)

.PHONY: clean all
clean:
	rm -rf $(PROGRAMS) $(OBJDIR)/* $(REVISION_FILE)

all: $(PROGRAMS)

REVISION = $(shell git log --pretty=format:%h --max-count=1)
REVISION_FILE = version-info-$(REVISION).txt

$(REVISION_FILE): $(OBJDIR) src
	rm -f version-info-*.txt
	git describe --match=build --dirty > $@
	git log --pretty=medium --date=iso8601 -1 >> $@

rsrc:
	@ mkdir -p $@

rsrc/version.txt: $(REVISION_FILE) | rsrc
	cp $? $@


.PHONY: FORCE
FORCE:

.PHONY: test
test:
	@ echo $(OBJECTS)
