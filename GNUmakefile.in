# SPDX-License-Identifier: BSD-2-Clause
# 
# Copyright (c) 2020 NKI/AVL, Netherlands Cancer Institute
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

firstTarget: all

CXX					= @CXX@
CXXFLAGS			= @CXXFLAGS@ @CPPFLAGS@ @BOOST_CPPFLAGS@ @PTHREAD_CFLAGS@
LDFLAGS				= @LDFLAGS@ @BOOST_LDFLAGS@ @PTHREAD_CFLAGS@
LIBS				= @LIBS@ \
					  @BOOST_IOSTREAMS_LIB@ \
					  @BOOST_PROGRAM_OPTIONS_LIB@ \
					  @BOOST_DATE_TIME_LIB@

prefix				= @prefix@
exec_prefix			= @exec_prefix@
bindir				= @bindir@
datarootdir			= @datarootdir@
datadir				= @datadir@

ifneq "$(CHECK_CONFIG)" ""

GNUmakefile: config.status GNUmakefile.in
	$(SHELL) ./config.status

config.status: configure
	$(SHELL) ./config.status --recheck

configure: configure.ac
	autoconf

endif

# main build variables
CXXFLAGS            += -Wall -Wno-multichar

DATADIR				= $(datadir)/@PACKAGE_NAME@

DEFINES				+= DATADIR='"$(DATADIR)"'

# Use the DEBUG flag to build debug versions of the code
DEBUG               = @DEBUG@

ifeq "$(DEBUG)" "1"
DEFINES				+= DEBUG
CXXFLAGS            += -g -O0
LDFLAGS				+= -g
else
CXXFLAGS			+= -O2
DEFINES				+= NDEBUG
endif

MRC					= @MRC@
USE_RSRC			= @USE_RSRC@
CIFPP_RSRC			= @CIFPP_RSRC@

# targets

VPATH += src:test

CXXFLAGS			+= $(DEFINES:%=-D%)

OBJDIR = obj
ifeq "$(DEBUG)" "1"
	OBJDIR	:= $(OBJDIR).dbg
endif

$(OBJDIR):
	mkdir -p $(OBJDIR)

$(OBJDIR)/%.o: %.cpp | $(OBJDIR)
	@ echo ">>" $<
	@ $(CXX) -MD -c -o $@ $< $(CFLAGS) $(CXXFLAGS)

COMMON_OBJECTS = pr-main.o

$(OBJDIR)/pr-main.o: src/revision.hpp

ifneq "$(USE_RSRC)" "0"
COMMON_RSRC = @CIFPP_RSRC@/dictionaries
endif

# The program rules

# disabled for now: centrifuge map-maker
PROGRAMS = \
	pdb2cif cif2pdb cif-diff cif-drop cif-grep cif-merge cif-validate mmCQL

define PROGRAM_template =

$(1)_OBJECTS += $(1).o $(COMMON_OBJECTS)

ifneq "$(USE_RSRC)" "0"
$(1)_OBJECTS += $(1).o $(1)_rsrc.o

$$(OBJDIR)/$(1)_rsrc.o: $$($(1)_RSRC) $$(COMMON_RSRC)
	$(MRC) -o $$@ $$^
endif

$(1): $$($(1)_OBJECTS:%=$(OBJDIR)/%)

endef

$(foreach program,$(PROGRAMS),$(eval $(call PROGRAM_template,$(program))))

$(PROGRAMS):
	@ echo '->' $@
	@ $(CXX) -o $@ $^ $(CXXFLAGS) $(LDFLAGS) $(LIBS)

OBJECTS = $(sort $(foreach program,$(PROGRAMS),$($(program)_OBJECTS)))

$(OBJDIR)/%.d: $(OBJDIR)/%.o

-include $(OBJECTS:%.o=$(OBJDIR)/%.d)

.PHONY: clean all
clean:
	rm -rf $(PROGRAMS) $(OBJDIR)/* $(REVISION_FILE)

all: $(PROGRAMS)

REVISION = $(shell git log --pretty=format:%h --max-count=1)
REVISION_FILE = version-info-$(REVISION).txt

$(REVISION_FILE): $(OBJDIR) src
	rm -f version-info-*.txt
	git describe --match=build --dirty > $@
	git log --pretty=medium --date=iso8601 -1 >> $@

src/revision.hpp: $(REVISION_FILE)
	echo 'const char kRevision[] = R"(' > $@
	cat $? >> $@
	echo ')";' >> $@

rsrc:
	@ mkdir -p $@

rsrc/version.txt: $(REVISION_FILE) | rsrc
	cp $? $@

.PHONY: install
install: $(PROGRAMS)
	for p in $(PROGRAMS); do install -D $$p $(bindir)/$$p; done
	for d in mmcif_ddl.dic  mmcif_pdbx.dic; do \
		install -D -m644 $(CIFPP_RSRC)/dictionaries/$$d $(DATADIR)/dictionaries/$$d; \
	done

.PHONY: FORCE
FORCE:

.PHONY: test
test:
	@ echo $(OBJECTS)
